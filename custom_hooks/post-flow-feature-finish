#!/bin/bash
#
# Runs at the end of git flow feature finish
#
# Positional arguments:
# $1    The friendly name of the branch
# $2    The origin remote
# $3    The full branch name (including the feature prefix)
#
# The following variables are available as they are exported by git-flow:
#
# MASTER_BRANCH - The branch defined as Master
# DEVELOP_BRANCH - The branch defined as Develop
#
NAME=$1
ORIGIN=$2
BRANCH=$3

###########functions 

get_version_filepath() 
{
	local sbt_path=$(find $PWD -type f -name "version.sbt")
	local mvn_path=$(find $PWD -type f -name "pom.xml")
	if [ "$sbt_path" != "" ]; then
		echo $sbt_path
		return 0
	elif [ "$mvn_path" != "" ]; then
		echo $mvn_path
		return 0
	else 
		echo "no build file found" 
		return 1
	fi
	return 0
}

update_version()
{
	local bpath=$1
	case "$bpath" in 
		*"mvn.xml" ) 
			local version=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec 2>/dev/null)
			local version_regex="[0-9]\+"
			local version_array=$(( echo $version | grep -o $version_regex ))
			local major=${version_array[0]}
                        local minor=$((${version_array[1]} + 1))
                        local patch="0-SNAPSHOT"
			local new_version=$major.$minor.$patch
			mvn versions:set -DnewVersion=$new_version
			echo $new_version
		;;
		*"version.sbt" ) 
		        local version_regex="[0-9]\+"
			local version_array=($( grep -o "$version_regex" "$bpath" ))
			local major=${version_array[0]}
			local minor=$((${version_array[1]} + 1))
			local patch="0-SNAPSHOT"
			local new_version=$major.$minor.$patch
			echo "version := $new_version" > $bpath
			echo $new_version
		;;
	esac
}




###################

set -x

# Implement your script here.
git fetch origin $DEVELOP_BRANCH
git checkout origin/$DEVELOP

version_file=$(get_version_filepath) 
if [ $? -e 1 ]; then
	echo "AUTOMATIC VERSION UPDATE FAILURE - Cannot find eiter of build.sbt, pom.xml"
	echo "Determine if project is configured correctly"
	echo "Switching back to develop branch"
	git checkout $DEVELOP_BRANCH
	exit 1
else 
	new_version=$(update_version $version_file)
	if [ $? -ne 0 ]; then
		git checkout $DEVELOP_BRANCH
	else
		git checkout $DEVELOP_BRANCH
		git add $version_file
		git commit -m "feature-finish, updated version to: $new_version"
		git tag -a $new_version -m "feature-finish, updated version to: $new_version"
	fi
fi
exit 0



